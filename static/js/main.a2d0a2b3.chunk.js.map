{"version":3,"sources":["Styles/TabElements.js","Containers/Tab.js","Containers/Tabs.js","Containers/App.js","serviceWorker.js","index.js"],"names":["TabNav","styled","div","_templateObject","TabTitle","_templateObject2","TabContent","_templateObject3","Wrapper","_templateObject4","Tab","state","active","index","_this","props","tabIndex","handleClick","setState","handleActive","console","log","react_default","a","createElement","onClick","this","className","tabTitle","Component","Tabs","handleActiveTab","_this2","children","map","child","Containers_Tab","key","App","content","src","alt","style","width","height","contentSec","contentThd","Containers_Tabs","Boolean","window","location","hostname","match","ReactDOM","render","Containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mpCAEA,IAAMA,EAASC,IAAOC,IAAVC,KAONC,EAAWH,IAAOC,IAAVG,KAWRC,EAAaL,IAAOC,IAAVK,KAYVC,EAAUP,IAAOC,IAAVO,KCCEC,6MAtBbC,MAAQ,CACNC,QAAQ,EACRC,MAAOC,EAAKC,MAAMC,YAGpBC,YAAc,WACZH,EAAKI,SAAS,SAACP,EAAOI,GAAR,MAAmB,CAC/BH,QAASD,EAAMC,OACfC,MAAOE,EAAMC,YAEfF,EAAKC,MAAMI,aAAaL,EAAKH,OAC7BS,QAAQC,IAAIP,EAAKH,gFAGjB,OACEW,EAAAC,EAAAC,cAACpB,EAAD,CAAUqB,QAASC,KAAKT,YAAaU,UAAWD,KAAKf,MAAMC,OAAS,SAAW,aAC5Ec,KAAKX,MAAMa,iBAvBFC,aC+CHC,6MA7CbnB,MAAQ,CACNC,QAAQ,EACRC,MAAO,KAGTkB,gBAAkB,SAACpB,GACjBG,EAAKI,SAAS,iBAAO,CACnBN,OAAQD,EAAMC,OACdC,MAAOF,EAAME,kFAIR,IAAAmB,EAAAN,KAGHO,EAKAP,KANFX,MACEkB,SAGApB,EAEAa,KAHFf,MACEE,MAGJ,OACES,EAAAC,EAAAC,cAAChB,EAAD,KACEc,EAAAC,EAAAC,cAACxB,EAAD,KACGiC,EAASC,IAAI,SAACC,GACb,OAAOb,EAAAC,EAAAC,cAACY,EAAD,CACCC,IAAKF,EAAMpB,MAAMC,SACjBY,SAAUO,EAAMpB,MAAMa,SACtBT,aAAca,EAAKD,gBACnBf,SAAUmB,EAAMpB,MAAMC,cAKhCiB,EAASC,IAAI,SAACC,GAAD,OACVtB,IAAUsB,EAAMpB,MAAMC,UACrBM,EAAAC,EAAAC,cAAClB,EAAD,CAAY+B,IAAKF,EAAMpB,MAAMC,UAC1BmB,EAAMpB,MAAMkB,oBAvCVJ,aCoCJS,mLAjCX,IAAMC,EAAUjB,EAAAC,EAAAC,cAAA,WACdF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKgB,IAAI,6CAA6CC,IAAI,GAAGC,MAAO,CAACC,MAAO,QAASC,OAAQ,YAE/FtB,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,iCAEIqB,EAAavB,EAAAC,EAAAC,cAAA,WACjBF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,sCAEIsB,EAAaxB,EAAAC,EAAAC,cAAA,WACjBF,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,sCAGF,OACEF,EAAAC,EAAAC,cAACuB,EAAD,KACEzB,EAAAC,EAAAC,cAAA,OAAKI,SAAS,QAAQZ,SAAU,GAC7BuB,GAEHjB,EAAAC,EAAAC,cAAA,OAAKI,SAAS,SAASZ,SAAU,GAC9B6B,GAEHvB,EAAAC,EAAAC,cAAA,OAAKI,SAAS,QAAQZ,SAAU,GAC7B8B,WA5BOjB,aCQEmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhC,EAAAC,EAAAC,cAAC+B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a2d0a2b3.chunk.js","sourcesContent":["import styled from 'styled-components'\r\n\r\nconst TabNav = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex-wrap: wrap;\r\n  margin-bottom: -5px;\r\n  z-index: 1;\r\n`;\r\nconst TabTitle = styled.div`\r\n  padding: 10px 7px;\r\n  width: 75px;\r\n  font-size: 16px;\r\n  border-radius: 5px;\r\n  border-right: #ddd 2px solid;\r\n  border-bottom: #ddd 2px solid;\r\n  background-color: #eee;\r\n  cursor: pointer;\r\n  text-align: center;\r\n`;\r\nconst TabContent = styled.div`\r\n  position: absolute;\r\n  left: 0;\r\n  padding: 15px 15px;\r\n  border-radius: 5px;\r\n  border-right: #ddd 2px solid;\r\n  border-bottom: #ddd 2px solid;\r\n  background-color: #eee;\r\n  width: inherit;\r\n  z-index: -1;\r\n  text-align: center;\r\n`;\r\nconst Wrapper = styled.div`\r\n  position: relative;\r\n  width: 350px;\r\n  margin: 5% auto;\r\n`;\r\n\r\nexport {Wrapper, TabNav, TabTitle, TabContent};","import React, { Component } from 'react';\nimport propTypes from 'prop-types';\nimport {TabTitle} from '../Styles/TabElements';\n\nclass Tab extends Component {\n  static propTypes = {\n    onClick: propTypes.func,\n    tabTitle: propTypes.string,\n    tabIndex: propTypes.number\n  }\n  \n  state = {\n    active: false,\n    index: this.props.tabIndex\n  }\n\n  handleClick = () => {\n    this.setState((state, props) => ({\n      active: !state.active,\n      index: props.tabIndex\n    }));\n    this.props.handleActive(this.state);\n    console.log(this.state);\n  } \n  render() {\n    return (  \n      <TabTitle onClick={this.handleClick} className={this.state.active ? 'active' : 'notactive'}>\n        {this.props.tabTitle}\n      </TabTitle>\n    );\n  }\n}\n\nexport default Tab;","import React, { Component } from 'react';\nimport {Wrapper, TabNav, TabContent} from '../Styles/TabElements';\nimport Tab from './Tab.js';\n\nclass Tabs extends Component { \n  \n  state = {\n    active: true,\n    index: 1\n  }\n\n  handleActiveTab = (state) => {\n    this.setState(() => ({\n      active: state.active,\n      index: state.index\n    }));\n  }\n\n  render() {\n    const {\n      props: {\n        children\n      },\n      state: {\n        index\n      }\n    } = this;\n    return (\n      <Wrapper > \n        <TabNav>\n          {children.map((child) => {\n            return <Tab \n                    key={child.props.tabIndex} \n                    tabTitle={child.props.tabTitle} \n                    handleActive={this.handleActiveTab}\n                    tabIndex={child.props.tabIndex}\n                    />\n          })}\n        </TabNav>\n        {\n          children.map((child) =>\n            (index === child.props.tabIndex && \n              <TabContent key={child.props.tabIndex}>\n                {child.props.children}</TabContent>) \n            )\n        }\n      </Wrapper>\n    );\n  }\n}\n\nexport default Tabs;\n","import React, { Component } from 'react';\nimport '../App.css';\nimport Tabs from './Tabs';\n\nclass App extends Component {\n\n  render() {\n    const content = <div>\n      <div>\n        <img src='https://source.unsplash.com/random/250x150' alt='' style={{width: '250px', height: '150px'}}/>\n      </div>\n      <h2>Hello</h2>\n      <div>Here is some text</div>\n    </div>;\n    const contentSec = <div>\n      <h2>Second</h2>\n      <div>tab is here, of course</div>\n    </div>\n    const contentThd = <div>\n      <h2>Third</h2>\n      <div>tab is here, of course</div>\n      </div>\n\n    return (\n      <Tabs>\n        <div tabTitle='First' tabIndex={1}>\n          {content}\n        </div>\n        <div tabTitle='Second' tabIndex={2}>\n          {contentSec}\n        </div>\n        <div tabTitle='Third' tabIndex={3}>\n          {contentThd}\n        </div>\n        \n      </Tabs>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}