{"version":3,"sources":["components/tab/data/TestData.js","components/tab/content/TabContent.js","components/tab/header/TabHead.js","components/tab/elements/TabElements.js","containers/App.js","serviceWorker.js","index.js"],"names":["data","title","index","content","react_default","a","createElement","src","alt","style","width","height","Content","styled","div","_templateObject","TabContent","props","active","map","_ref","key","tabindex","Title","TabHead_templateObject","primary","propTypes","onClick","PropTypes","func","isRequired","string","bool","TabHead","handleActive","TabNav","TabElements_templateObject","Wrapper","_templateObject2","App","state","handleClick","pointer","_this","setState","this","header_TabHead","Data","content_TabContent","Component","array","defaultProps","Boolean","window","location","hostname","match","ReactDOM","render","containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oOA0BeA,EANF,CACX,CAACC,MAAO,OAAQC,MAAO,QAASC,QAnBfC,EAAAC,EAAAC,cAAA,WACjBF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,IAAI,6CAA6CC,IAAI,GAAGC,MAAO,CAACC,MAAO,QAASC,OAAQ,YAE/FP,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,wBAeA,CAACL,MAAO,OAAQC,MAAO,SAAUC,QAZhBC,EAAAC,EAAAC,cAAA,WACjBF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,wBAWA,CAACL,MAAO,KAAMC,MAAO,QAASC,QARbC,EAAAC,EAAAC,cAAA,WACjBF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,wVCdF,IAAMM,EAAUC,IAAOC,IAAVC,KAyBEC,EAZI,SAAAC,GAAS,IACnBjB,EAAgBiB,EAAhBjB,KAAMkB,EAAUD,EAAVC,OAEb,OAAOlB,EAAKmB,IAAI,SAAAC,GAAsB,IAApBlB,EAAoBkB,EAApBlB,MAAOC,EAAaiB,EAAbjB,QACvB,OAAQe,IAAWhB,GACdE,EAAAC,EAAAC,cAACM,EAAD,CAASS,IAAKnB,EAAOoB,SAAUpB,GAC3BC,sTCfb,IAAMoB,EAAQV,IAAOC,IAAVU,IAMQ,SAAAP,GAAK,OAAIA,EAAMQ,QAAU,OAAS,SAoBrDF,EAAMG,UAAY,CAChBC,QAASC,IAAUC,KAAKC,WACxBR,SAAUM,IAAUG,OAAOD,WAC3BL,QAASG,IAAUI,MAGNC,MApBC,SAAChB,GAAU,IAClBjB,EAA8BiB,EAA9BjB,KAAMkC,EAAwBjB,EAAxBiB,aAAchB,EAAUD,EAAVC,OAC3B,OAAOlB,EAAKmB,IAAI,SAAAC,GAAoB,IAAlBnB,EAAkBmB,EAAlBnB,MAAOC,EAAWkB,EAAXlB,MACvB,OACEE,EAAAC,EAAAC,cAACiB,EAAD,CAAOF,IAAKnB,EACNyB,QAAS,kBAAMO,EAAahC,IAC5BoB,SAAUpB,EACVuB,QAASP,IAAWhB,GACvBD,qTCzBT,IAAMkC,EAAStB,IAAOC,IAAVsB,KAQNC,EAAUxB,IAAOC,IAAVwB,KCCPC,6MACJC,MAAQ,CAAEtC,MAAO,WAEjBuC,YAAc,SAACvC,GACb,IAAMwC,EAAUxC,EAChByC,EAAKC,SAAS,CAAE1C,MAAOwC,6EAGhB,IAGHxC,EAEA2C,KAHFL,MACEtC,MAIJ,OACEE,EAAAC,EAAAC,cAAC+B,EAAD,KACEjC,EAAAC,EAAAC,cAAC6B,EAAD,KACE/B,EAAAC,EAAAC,cAACwC,EAAD,CAAS9C,KAAM+C,EACbb,aAAcW,KAAKJ,YACnBhB,SAAS,EACTP,OAAQhB,KAEZE,EAAAC,EAAAC,cAAC0C,EAAD,CAAYhD,KAAM+C,EAAM7B,OAAQhB,YAvBtB+C,aA6BlBhB,EAAQP,UAAY,CAClB1B,KAAM4B,IAAUsB,MAAMpB,WACtBI,aAAcN,IAAUC,KAAKC,WAC7BL,QAASG,IAAUI,KACnBd,OAAQU,IAAUG,QAGpBE,EAAQkB,aAAe,CACrB1B,SAAS,GAGIc,cCvCKa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtD,EAAAC,EAAAC,cAACqD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.549cf2aa.chunk.js","sourcesContent":["import React from 'react';\n\nconst contentFst = <div>\n  <div>\n    <img src='https://source.unsplash.com/random/250x150' alt='' style={{width: '250px', height: '150px'}}/>\n  </div>\n  <h2>Hello</h2>\n  <div>We will</div>\n</div>;\n\nconst contentSec = <div>\n  <h2>SecondTab</h2>\n  <div>We will</div>\n</div>;\n\nconst contentThd = <div>\n  <h2>ThirdTab</h2>\n  <div>Rock you</div>\n</div>;\n\nconst data = [\n  {title: 'Lets', index: 'FIRST', content: contentFst},\n  {title: 'Rock', index: 'SECOND', content: contentSec},\n  {title: 'It', index: 'THIRD', content: contentThd},\n]\n\nexport default data;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst Content = styled.div`\n  position: absolute;\n  left: 0;\n  padding: 15px 15px;\n  border-radius: 5px;\n  border-right: #ddd 2px solid;\n  border-bottom: #ddd 2px solid;\n  background-color: #eee;\n  width: inherit;\n  z-index: -1;\n  text-align: center;\n`;\n\nconst TabContent = props => {\n  const {data, active} = props;\n  \n  return data.map(({index, content}) => {\n    return (active === index && \n        (<Content key={index} tabindex={index}>\n            {content}\n        </Content>)\n       )\n    });\n}\n\nexport default TabContent;\n","// react\nimport React from 'react';\n// styled\nimport styled from 'styled-components';\n// prop types\nimport PropTypes from 'prop-types';\n\nconst Title = styled.div`\n  padding: 10px 7px;\n  width: 75px;\n  font-size: 16px;\n  border-radius: 5px;\n  border-right: #ccc 2px solid;\n  border-bottom: ${props => props.primary ? '#eee' : '#ccc'} 2px solid;\n  background-color: #eee;\n  cursor: pointer;\n  text-align: center;\n`;\n\nconst TabHead = (props) => {\n  const {data, handleActive, active} = props;\n  return data.map(({title, index}) => {\n    return (\n      <Title key={index} \n            onClick={() => handleActive(index)}\n            tabindex={index}\n            primary={active === index ? true : false}>\n        {title}\n      </Title>\n    );\n  });\n}\n\nTitle.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  tabindex: PropTypes.string.isRequired,\n  primary: PropTypes.bool\n}\n\nexport default TabHead;\n","import styled from 'styled-components'\r\n\r\nconst TabNav = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex-wrap: wrap;\r\n  margin-bottom: -5px;\r\n  z-index: 1;\r\n`;\r\n\r\nconst Wrapper = styled.div`\r\n  position: relative;\r\n  width: 350px;\r\n  margin: 5% auto;\r\n`;\r\n\r\nexport {Wrapper, TabNav};","// react import\nimport React, { Component } from 'react';\n// data for tests\nimport  Data  from 'components/tab/data/TestData';\n// tab's components\nimport TabContent from 'components/tab/content/TabContent';\nimport TabHead from 'components/tab/header/TabHead';\nimport { TabNav, Wrapper } from 'components/tab/elements/TabElements';\n// prop types\nimport PropTypes from 'prop-types';\n\nclass App extends Component {\n  state = { index: 'FIRST' }\n\n  handleClick = (index) => {\n    const pointer = index;\n    this.setState({ index: pointer });\n  }\n\n  render() {\n    const {\n      state: {\n        index\n      }\n    } = this;\n\n    return (\n      <Wrapper>\n        <TabNav>\n          <TabHead data={Data}\n            handleActive={this.handleClick}\n            primary={false}\n            active={index}/>\n        </TabNav>\n        <TabContent data={Data} active={index}/>\n      </Wrapper>\n    );\n  }\n}\n\nTabHead.propTypes = {\n  data: PropTypes.array.isRequired,\n  handleActive: PropTypes.func.isRequired,\n  primary: PropTypes.bool,\n  active: PropTypes.string\n}\n\nTabHead.defaultProps = {\n  primary: false\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'containers/App.js';\nimport 'index.css';\nimport * as serviceWorker from 'serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}